name: ocamlrun Asset Distribution

on:
  workflow_dispatch:
  push:
    branches:
      # Any commit to the main branch
      - "main"
    tags:
      # Any push to a tag that starts with 'v' or a number
      - v*
      - "[0-9]+.*"

env:
  COMPONENT: dkml-component-staging-ocamlrun

jobs:
  setup-dkml:
    uses: 'diskuv/dkml-workflows/.github/workflows/setup-dkml.yml@v0'
    permissions:
      #   By explicitly setting at least one permission, all other permissions
      #   are set to none. setup-dkml.yml does not need access to your code!
      #   Verify in 'Set up job > GITHUB_TOKEN permissions'.
      actions: none

  build-dkml:
    needs: setup-dkml
    strategy:
      fail-fast: false
      matrix:
        include:
          # Compiling ocamlrun does not require ocamlopt; on 64-bit Windows it will build both
          # windows_x86 and windows_x86_64.
          # - gh_os: windows-2019
          #   abi_pattern: win32-windows_x86
          #   dkml_host_abi: windows_x86
          #   opam_root: D:/.opam
          #   default_shell: msys2 {0}
          #   msys2_system: MINGW32
          #   msys2_packages: mingw-w64-i686-pkg-config
          - gh_os: windows-2019
            abi_pattern: win32-windows_x86_64
            dkml_host_abi: windows_x86_64
            opam_root: D:/.opam
            default_shell: msys2 {0}
            msys2_system: CLANG64
            msys2_packages: mingw-w64-clang-x86_64-pkg-config
          # Got:
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] /Applications/Xcode_14.0.1.app/Contents/Developer/usr/bin/make -C runtime  all
          #   ...
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] /usr/bin/clang -arch arm64 -c -O2 -fno-strict-aliasing -fwrapv -pthread -Wall -Wdeclaration-after-statement -fno-common -g -arch arm64 -D_FILE_OFFSET_BITS=64 -DCAML_NAME_SPACE  -DCAMLDLLIMPORT=  -o startup_byt.b.o startup_byt.c
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] startup_byt.c:382:49: error: too few arguments to function call, single argument 's' was not specified
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out]          caml_stat_strdup_of_os(OCAML_STDLIB_DIR));
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out]          ~~~~~~~~~~~~~~~~~~~~~~                 ^
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] ./caml/memory.h:161:29: note: 'caml_stat_strdup' declared here
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] CAMLextern caml_stat_string caml_stat_strdup(const char *s);
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out]                             ^
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] 1 error generated.
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] make[1]: *** [startup_byt.b.o] Error 1
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] make[1]: *** Waiting for unfinished jobs....
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] make: *** [makeruntime] Error 2
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] make: INTERNAL: Exiting with 4 jobserver tokens available; should be 3!
          #   [dkml-component-staging-ocamlrun-4845-b0c3ca.out] FATAL: make -j3 -l3 CAMLDEP=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/runtime/ocamlrun /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/ocamlc -depend CAMLLEX=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/runtime/ocamlrun /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/lex/ocamllex OCAMLLEX=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/runtime/ocamlrun /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/lex/ocamllex CAMLYACC=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/yacc/ocamlyacc OCAMLYACC=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/yacc/ocamlyacc CAMLRUN=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/runtime/ocamlrun OCAMLRUN=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/runtime/ocamlrun CAMLC=/usr/bin/env /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/support/ocamlcHost-final.wrapper OCAMLC=/usr/bin/env /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/support/ocamlcHost-final.wrapper CAMLOPT=/usr/bin/env /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/support/ocamloptHost-final.wrapper OCAMLOPT=/usr/bin/env /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/support/ocamloptHost-final.wrapper OCAMLDOC_RUN=/usr/bin/env CAML_LD_LIBRARY_PATH=/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/otherlibs/unix:/Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/otherlibs/str /Users/runner/.opam/dkml/share/dkml-component-staging-ocamlrun/staging-files/src/ocaml-1/ocamldoc/ocamldoc NATDYNLINK=true NATDYNLINKOPTS= runtime coreall failed          
          #
          # but no problem when done from commandline using XCode 14.1. Perhaps it is a problem with XCode 14.0.1.
          #
          # - gh_os: macos-latest
          #   abi_pattern: macos-darwin_all
          #   dkml_host_abi: darwin_x86_64
          #   default_shell: sh
          #   opam_root: /Users/runner/.opam
          - gh_os: ubuntu-latest
            abi_pattern: manylinux2014-linux_x86
            default_shell: sh
            dkml_host_abi: linux_x86
            opam_root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
            in_docker: "true"
          - gh_os: ubuntu-latest
            abi_pattern: manylinux2014-linux_x86_64
            default_shell: sh
            dkml_host_abi: linux_x86_64
            opam_root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
            in_docker: "true"
    runs-on: ${{ matrix.gh_os }}
    name: build-${{ matrix.abi_pattern }}
    defaults:
      run:
        shell: ${{ matrix.default_shell }}
    env:
      OPAMROOT: ${{ matrix.opam_root }}
      # Force recompilation rather than download the asset
      DKML_BUST_CACHE: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: .ci/dist

      - name: Install MSYS2 (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2_system }}
          update: true
          install: >-
            ${{ matrix.msys2_packages }}
            wget
            make
            rsync
            diffutils
            patch
            unzip
            git
            tar
            tree

      - name: Import build environments from setup-dkml
        run: |
          ${{ needs.setup-dkml.outputs.import_func }}
          import ${{ matrix.abi_pattern }}

      - name: Cache Opam downloads by host
        uses: actions/cache@v3
        with:
          path: ${{ matrix.opam_root }}/download-cache
          key: ${{ matrix.dkml_host_abi }}

      - name: Add Opam pins until published in Opam and possibly fdopen repositories
        run: .github/workflows/scripts/pin-unix-asset.sh

      - name: Install component
        run: |
          #!/bin/sh
          set -euf

          # Weirdly Opam 2.0.10 (from fdopen) does not install uucd for uucp
          # even though it is a test dependency of uucp. Then uucp fails to
          # build.
          opamrun install uucd --yes

          ec=0
          if ! opamrun install ./$COMPONENT.opam --with-test --yes; then
            tail -n10000 "${{ matrix.opam_root }}"/log/dkml-component-*.out
            ec=1
          fi

          # Diagnostics
          set -x
          b="${{ matrix.opam_root }}"/dkml/.opam-switch/build/$COMPONENT.4.14.0
          if [ -e $b ]; then
            if [ -x /usr/bin/tree ]; then
              tree -F $b
            else
              ls -R $b
            fi
          fi

          exit $ec


      # Bundle up single-arch asset

      - name: Bundle up single-ABI asset
        run: |
          #!/bin/sh
          set -eufx
          install -d dist
          share=$(opamrun var ${{env.COMPONENT}}:share)
          opamrun exec -- sh -xc "tar cvCfz '$share' dist/${{matrix.abi_pattern}}.tar.gz ."

      # Upload

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.abi_pattern }}
          path: dist/${{ matrix.abi_pattern }}.tar.gz

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for softprops/action-gh-release@v1
    needs:
      - build-dkml
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Remove unneeded artifacts
        run: rm -rf setup-*
        working-directory: dist

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Restructure multi-ABI files
        run: |
          _asset="$(pwd)/_asset"
          install -d "$_asset"

          cd dist
          find . -mindepth 1 -maxdepth 1 -type d | while read -r distname; do
            tar xvCfz "$_asset" $distname/$distname.tar.gz
            rm -f $distname/$distname.tar.gz
          done

      - name: Display restructured files
        run: ls -R
        working-directory: _asset

      - name: Bundle up multi-ABI asset
        run:  tar cvCfz _asset $GITHUB_WORKSPACE/$COMPONENT.tar.gz .

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.COMPONENT }}.tar.gz
