available: [ os = "macos" | (os = "linux" & (arch = "x86_32" | arch = "x86_64")) | os = "win32" ]
build: [
  # Homebrew's bundle tap, needed for reproducible build auditing in drc's crossplatform-functions.sh.
  ["sh" "src/opamtime/brewbundle.sh"] {os = "macos"}

  # OCaml source code
  ["install" "-d" "dl/ocaml/flexdll"]
  ["tar" "xCfz" "dl/ocaml"          "dl/ocaml.tar.gz"   "--strip-components=1"]
  ["tar" "xCfz" "dl/ocaml/flexdll"  "dl/flexdll.tar.gz" "--strip-components=1"]

  # Create a DKMLDIR. Its structure mimics a git submodule setup.
  #   <dkmldir>/vendor/drc/
  ["install" "-d" "dkmldir/vendor/drc"]
  ["tar" "xCfz" "dkmldir/vendor/drc" "dl/dkml-runtime-common.tar.gz" "--strip-components=1"]
  #   <dkmldir>/.dkmlroot
  ["install" "dkmldir/vendor/drc/.template.dkmlroot" "dkmldir/.dkmlroot"]

  #   <dkmldir>/vendor/dkml-compiler/
  ["install" "-d" "dkmldir/vendor/dkml-compiler/src"]
  ["tar" "xCfz" "dkmldir/vendor/dkml-compiler" "dl/dkml-compiler.tar.gz" "--strip-components=1"]

  # Developers:
  #   Uncomment to test your own scripts
  #[ "diskuvbox" "copy-file" "r-c-ocaml-1-setup.sh" "dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh" ]

  # --------------
  # Build component and .api library
  # --------------

  ["dune" "subst"] {dev}
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "--promote-install-files=false"
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
  ["dune" "install" "-p" name "--create-install-files" name]
]
install: [
  # --------------
  # First pass
  # --------------

  # [1] Run r-c-ocaml-1-setup.sh
  [
    "env" "TOPDIR=dkmldir/vendor/drc/all/emptytop"
      "DKML_REPRODUCIBLE_SYSTEM_BREWFILE=%{_:build}%/Brewfile"
      "dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh"
      "-d" "dkmldir"
      "-f" "src/ocaml-1"
      "-k" "vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh"
      "-v" "dl/ocaml"
      #   Host-compile into staging-files/<host-abi>
      "-t" "%{_:share}%/staging-files"
      "-pwindows_x86_64"  { os = "win32" }
      "-plinux_x86"       { os = "linux" & arch = "x86_32" }
      "-plinux_x86_64"    { os = "linux" & arch = "x86_64" }
      "-pdarwin_x86_64"   { os = "macos" & arch = "x86_64" }
      "-pdarwin_arm64"    { os = "macos" & arch = "arm64" }
      #   ABIs
      "-ewindows_x86_64"  { os = "win32" }
      "-elinux_x86"       { os = "linux" & arch = "x86_32" }
      "-elinux_x86_64"    { os = "linux" & arch = "x86_64" }
      "-edarwin_x86_64"   { os = "macos" & arch = "x86_64" }
      "-edarwin_arm64"    { os = "macos" & arch = "arm64" }
      #   Cross-compile into staging-files/<cross-abi>
      "-g" "."
      #   Target architectures (if cross-compiling)
      #     TODO: With the -adarwin_x86_64 configuration below, an Apple Silicon machine will produce an arm64 ocamlopt.opt
      #     in the staging-files/darwin_arm64 directory,
      #     and that ocamlopt.opt will create x86_64 OCaml native executables. So that darwin_arm64/bin/ocamlopt.opt will not
      #     run on an x86_64 machine.
      #     The -adarwin_arm64 configuration is similar but has one important difference. The config will produce an x86_64
      #     ocamlopt.opt, in the staging-files/darwin_x86_64 directory, and that ocamlopt.opt will create arm64 OCaml native
      #     executables. But that darwin_x86_64/bin/ocamlopt.opt _will_ run on almost _all_ Apple Silicon (arm64) machines
      #     because of Rosetta2. The only major exception is Opam CI has disabled Rosetta2 as of Nov 8, 2022.
      #     Ideally we would have [-aHOST] and [-aHOST-TARGET]. That is: -adarwin_x86_64, -adarwin_arm64 and
      #     -adarwin_x86_64-darwin_arm64. But that cross specification has ripple effects that needs time (technical debt) to
      #     get right. Luckily our build machines are always Apple x86_64 (GitHub Actions and GitLab CI/CD), and even if the
      #     build machines were Apple Silicon we typically only care about the generated artifacts (the target ABI).
      "-adarwin_x86_64=vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh" { os = "macos" & arch = "arm64" }
      "-adarwin_arm64=vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh"  { os = "macos" & arch = "x86_64" }
      #     For any non cross-compiling platforms we save time and space by
      #     only building the runtime.
      "-r"                                        { os = "win32" | (os = "linux" & (arch = "x86_32" | arch = "x86_64")) }
  ]

  # [1] Run r-c-ocaml-2-build_host-noargs.sh
  [
    "sh" "-eufc"
    "cd '%{_:share}%/staging-files' && echo 1 - host && share/dkml/repro/100co/vendor/dkml-compiler/src/r-c-ocaml-2-build_host-noargs.sh"
  ]

  # [1] Run r-c-ocaml-3-build_cross-noargs.sh if cross-compiling,
  # which will place its output into staging-files/<cross-abi>
  # (confer: "-g" "%{_:share}%/staging-files")
  [
    "sh" "-eufc"
    "cd '%{_:share}%/staging-files' && echo 1 - cross && share/dkml/repro/100co/vendor/dkml-compiler/src/r-c-ocaml-3-build_cross-noargs.sh"
  ] { os = "macos" }

  # --------------
  # Second pass
  #   For platforms that can do multiple _host_ ABIs _without_ cross-compiling.
  #   * MSVC can trivially do 32-bit and 64-bit without cross-compiling.
  #   * Most often Linux can as well as long as `gcc -m32` is configured.
  #     However for ease of use in GitHub Actions we expect Linux 32-bit and
  #     Linux 64-bit to be done with different Opam switches.
  # --------------

  # [2] Run r-c-ocaml-1-setup.sh
  [
    "env" "TOPDIR=dkmldir/vendor/drc/all/emptytop"
      "DKML_REPRODUCIBLE_SYSTEM_BREWFILE=%{_:build}%/Brewfile"
      "dkmldir/vendor/dkml-compiler/src/r-c-ocaml-1-setup.sh"
      "-d" "dkmldir"
      "-f" "src/ocaml-2"
      "-r" # Build runtime only
      "-k" "vendor/dkml-compiler/src/standard-compiler-env-to-ocaml-configure-env.sh"
      "-v" "dl/ocaml"
      #   Host-compile into staging-files/<host-abi>
      "-t" "%{_:share}%/staging-files"
      "-pwindows_x86"     { os = "win32" }
      #   ABIs
      "-ewindows_x86"     { os = "win32" }
  ] { !(os = "macos") & !(os = "linux") }

  # [2] Run r-c-ocaml-2-build_host-noargs.sh
  [
    "sh" "-eufc"
    "cd '%{_:share}%/staging-files' && echo 2 - host && share/dkml/repro/100co/vendor/dkml-compiler/src/r-c-ocaml-2-build_host-noargs.sh"
  ] { !(os = "macos") & !(os = "linux") }

  # --------------
  # Clean build files
  # --------------

  [ "rm" "-rf" "%{_:share}%/staging-files/share" ]
  [ "rm" "-rf" "%{_:share}%/staging-files/src" ]
]
extra-source "dl/ocaml.tar.gz" {
  src: "https://github.com/ocaml/ocaml/archive/4.12.1.tar.gz"
  checksum: "sha256=f5a48a90557cb47ace7b1590fcab1362a1af38629a218350f69c225c57e96a41"
}
extra-source "dl/flexdll.tar.gz" {
  src: "https://github.com/alainfrisch/flexdll/archive/0.39.tar.gz"
  checksum: "sha256=51a6ef2e67ff475c33a76b3dc86401a0f286c9a3339ee8145053ea02d2fb5974"
}
extra-source "dl/homebrew-bundle.tar.gz" {
  src: "https://github.com/Homebrew/homebrew-bundle/archive/4756e4c4cf95485c5ea4da27375946c1dac2c71d.tar.gz"
  checksum: [
    "sha256=10c024ca7871cea36b4c27b2601971d3fa6cba6f37855613baf0026d0f555e76"
  ]
}
extra-source "dl/dkml-compiler.tar.gz" {
  src: "https://github.com/diskuv/dkml-compiler/releases/download/4.12.1-v1.0.0/src.tar.gz"
  checksum: [
    "sha256=8beda92f97cde6d4a55a836ca6dc9f860bb5f1a6b765b80be4594943288571cf"
  ]
}
extra-source "dl/dkml-runtime-common.tar.gz" {
  src: "https://github.com/diskuv/dkml-runtime-common/archive/refs/tags/v1.0.1.tar.gz"
  checksum: [
    "sha256=35a88827e3e02665a6ed5abf1c1aa457fbb3c2a78ff61c4211d24bec8d8b757d"
  ]
}
extra-source "dl/dkml-runtime-distribution.tar.gz" {
  src: "https://github.com/diskuv/dkml-runtime-distribution/archive/refs/tags/v1.0.1.tar.gz"
  checksum: [
    "sha256=ffbdf2624e1fee38be7a218f497be9f660a4758e1ed5abf2ce937e0100e8d004"
  ]
}
